import {Markup, Telegraf} from 'telegraf';

import {generateRegExp} from './common/regexp.mjs';
import {spam_rules} from './spam_rules/index.mjs';

import * as db from './common/db.mjs';


console.info('Starting main');
const bot = new Telegraf(process.env.TOKEN);

const HelloText = `–ü—Ä–∏–≤–µ—Ç, %fName% %lName% \(@%username%\).
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç "–°–∏—Å—Ç–µ–º–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—á—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ https://t.me/sysadminru/104027`;

const bannedUserID = {};

/*
const SmileForButtons = [
	{pict: 'üê∏', value: '–õ—è–≥—É—à–∫–∞'},
	{pict: 'üêµ', value: '–û–±–µ–∑—å—è–Ω–∫–∞'},
	{pict: 'üê•', value: '–¶—ã–ø–ª—ë–Ω–æ–∫'},
	{pict: 'ü™ø', value: '–ì—É—Å—å'},
	{pict: 'ü¶âÔ∏è', value: '–°–æ–≤–∞'},
	{pict: 'ü¶ñ', value: '–î–∏–Ω–æ–∑–∞–≤—Ä'},
	{pict: 'ü¶ë', value: '–ö–∞–ª—å–º–∞—Ä'},
	{pict: 'ü¶ê', value: '–ö—Ä–µ–≤–µ—Ç–∫–∞'},
	{pict: 'üêñ', value: '–ü–æ—Ä–æ—Å—ë–Ω–æ–∫'},
	{pict: 'üêà', value: '–ö–æ—Ç—ë–Ω–æ–∫'},
	{pict: 'üçÑ', value: '–ì—Ä–∏–±'},
	{pict: '‚Äçüêö', value: '–†–∞–∫—É—à–∫–∞'},
	{pict: 'üåπ', value: '–¶–≤–µ—Ç–æ–∫'},
	{pict: 'üå≤', value: '–Å–ª–∫–∞'},
	{pict: 'üåµ', value: '–ö–∞–∫—Ç—É—Å'},
	{pict: 'üåà', value: '–†–∞–¥—É–≥–∞'},
	{pict: '‚òÄÔ∏è', value: '–°–æ–ª–Ω—Ü–µ'},
	{pict: 'ü¶Ä', value: '–ö—Ä–∞–±'},
	{pict: 'ü¶à', value: '–ê–∫—É–ª–∞'},
	{pict: 'üêù‚òÇ', value: '–ü—á–µ–ª–∞'},
	{pict: 'üíß', value: '–ö–∞–ø–ª—è'},
	{pict: '‚ùÑÔ∏è', value: '–°–Ω–µ–∂–∏–Ω–∫–∞'},
	{pict: 'Ô∏è‚òÇÔ∏è', value: '–ó–æ–Ω—Ç'},
];
*/

const makeName = (user) => `${user?.first_name ? user?.first_name : ''}${user?.last_name ? (user?.first_name ? ' ' : '') + user?.last_name : ''}`;

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} ctx
 * @param {Number} msg_id
 * @returns {Promise<Boolean>}
 */
const deleteMessage = async(ctx, msg_id) => {
	try{
		return await ctx.deleteMessage(msg_id);
		
	}catch(err){
		console.warn(err);
	}
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {Object}   ctx
 * @param {String}   message
 * @param {Boolean}            [isMarkdown = false]
 * @returns {Promise<TextMessage>}
 */
const sendMessage = async(ctx, message, isMarkdown) => {
	try{
		let msg;
		if(isMarkdown){
			msg = await ctx.sendMessage(message, {parse_mode: 'MarkdownV2'});
		}else{
			msg = await ctx.sendMessage(message);
		}
		return msg;
		
	}catch(err){
		console.warn(err);
	}
};

/**
 * @param {Object}   ctx
 * @param {String}   message
 * @param {Boolean} [isMarkdown=false]
 * @param {Number}  [timeout=1000]
 * @return {Promise<*>}
 */
const sendAutoRemoveMsg = async(ctx, message, isMarkdown, timeout) => {
	const msg = await sendMessage(ctx, message, isMarkdown);
	
	setTimeout(((ctx, msg) => () => deleteMessage(ctx, msg?.message_id))(ctx, msg), timeout || 1000);
	
	return msg;
};

const sentQuestion = async(ctx, question, buttons, timeout) => {
	const msg = await ctx.reply(
		question,
		Markup.inlineKeyboard([buttons]).oneTime().resize()
	);
	
	if(timeout > 0){
		setTimeout(((ctx, msg) => () => deleteMessage(ctx, msg?.message_id))(ctx, msg), timeout);
	}
	
	return msg;
};

//***************************************

/**
 * @typedef Chat
 * @property id {Number}
 * @property type {String
 * @property title {String}
 * @property invite_link {String}
 * @property permission {Object}
 * @property join_to_send_messages {Boolean}
 * @property max_reaction_count {Number}
 */

/**
 * @typedef User
 * @property id {Number}
 * @property username {String}
 * @property first_name {String}
 * @property last_name {String}
 * @property type {String}
 * @property active_usernames {[String]}
 * @property bio {String}
 * @property has_private_forwards {Boolean}
 * @property max_reaction_count {Number}
 * @property accent_color_id: {Number}
 */

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ –ë–î
 * @param {Object|Chat} chat
 * @returns {Promise<*>}
 */
const addChat2DB = async chat => db.query(`
            INSERT INTO sysadmin_chat_bot.chats(id, type, title, invite_link, permissions, join_to_send_messages, max_reaction_count, raw)
            VALUES ($1::BIGINT, $2::TEXT, $3::TEXT, $4::BOOL, $5::JSONB, $6::BOOL, $7::INT, $8::JSONB)
            ON CONFLICT(id) DO UPDATE SET type=excluded.type,
                                          title=excluded.title,
                                          invite_link=excluded.invite_link,
                                          permissions=excluded.permissions,
                                          join_to_send_messages=excluded.join_to_send_messages,
                                          max_reaction_count=excluded.max_reaction_count,
                                          raw=excluded.raw;`,
	[chat?.id, chat?.type, chat?.title, chat?.invite_link, JSON.stringify(chat?.permission), chat?.join_to_send_messages, chat?.max_reaction_count, JSON.stringify(chat)]
);

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
 * @param {Object|User} user
 * @returns {Promise<*>}
 */
const addUser2DB = async user => db.query(`
            INSERT INTO sysadmin_chat_bot.users(id, username, first_name, last_name, type, active_usernames, bio, has_private_forwards, max_reaction_count, accent_color_id, raw)
            VALUES ($1::BIGINT, $2::TEXT, $3::TEXT, $4::TEXT, $5::TEXT, STRING_TO_ARRAY($6::TEXT, ',')::TEXT[], $7::TEXT, $8::BOOL, $9::INT, $10::INT, $11::JSONB)
            ON CONFLICT(id) DO UPDATE SET username=excluded.username,
                                          first_name=excluded.first_name,
                                          last_name=excluded.last_name,
                                          type=excluded.type,
                                          active_usernames=excluded.active_usernames,
                                          bio=excluded.bio,
                                          has_private_forwards=excluded.has_private_forwards,
                                          max_reaction_count=excluded.max_reaction_count,
                                          accent_color_id=excluded.accent_color_id,
                                          raw=excluded.raw;`,
	[user?.id, user?.username, user?.first_name, user?.last_name, user?.type, user?.active_usernames?.join(','), user?.bio, user?.has_private_forwards, user?.max_reaction_count, user?.accent_color_id, JSON.stringify(user)]
);

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∫–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–ß–∞—Ç –≤ –ë–î
 * @param {Object|Chat} chat
 * @param {Object|User} user
 * @param {Boolean} bNew
 * @returns {Promise<*>}
 */
const addUser2Chat2DB = async(chat, user, bNew) => db.query(`
            INSERT INTO sysadmin_chat_bot.users_chats(user_id, chat_id, new_user)
            VALUES ($1::BIGINT, $2::BIGINT, $3::BOOL)
            ON CONFLICT(user_id, chat_id) DO UPDATE SET new_user=excluded.new_user;`,
	[user?.id, chat?.id, bNew]
);

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/—á–∞—Ç
 * @param {Object|Chat} chat
 * @param {Object|User} user
 * @returns {Promise<*>}
 */
const removeUserFromChat2DB = async(chat, user) => db.query(`
            DELETE FROM sysadmin_chat_bot.users_chats
            WHERE user_id=$1::BIGINT AND chat_id=$2::BIGINT`,
	[user?.id, chat?.id]
);

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
 * @param {Object|Chat} chat
 * @param {Object|User} user
 * @returns {Promise<Boolean>}
 */
const getUserStateFromChat = async(chat, user) => {
	/** @type {{rows:[{new_user: Boolean}]}} */
	const res = await db.query(
		`SELECT NEW_USER
         FROM sysadmin_chat_bot.users_chats
         WHERE user_id = $1::BIGINT
           AND chat_id = $2::BIGINT;`,
		[user?.id, chat?.id]
	);
	return res?.rows[0]?.new_user;
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
 * @param {Object} ctx
 * @param {Object|Chat} chat
 * @param {Object|User} user
 * @param {Object} message
 * @returns {Promise<*>}
 */
const addMessage2DB = async(ctx, chat, user, message) => db.query(`
            INSERT INTO sysadmin_chat_bot.messages (message_id, chat_id, user_id, message, ctx)
            VALUES ($1::BIGINT, $2::BIGINT, $3::BIGINT, $4::JSONB, $5::JSONB)
            ON CONFLICT DO NOTHING;`,
	[message?.message_id, chat?.id, user?.id, JSON.stringify(message), JSON.stringify(ctx)]);

/*
const getChatUserQuestion = async(chat, user) => {
	const res = await db.query(
		`SELECT answer
         FROM sysadmin_chat_bot.chats_users_test_question
         WHERE user_id = $1::BIGINT
           AND chat_id = $2::BIGINT;`,
		[user?.id, chat?.id]
	);
	
	if(res?.rows[0]?.answer){
		return res?.rows[0]?.answer;
		
	}else{
		const res = await db.query(
			`SELECT answer
             FROM sysadmin_chat_bot.chats_users_test_question
             WHERE user_id = $1::BIGINT
               AND chat_id = $2::BIGINT;`,
			[user?.id, chat?.id]
		);
	}
	
};
*/

//***************************************

bot.onerror = err => {
	console.warn('bot - ERROR');
	console.dir(err);
};

bot.start((ctx) => {
	return sendAutoRemoveMsg(ctx, 'Welcome');
});

bot.help((ctx) => {
	return sendAutoRemoveMsg(ctx, 'Bot for telergamm SysAdminChat');
});

bot.command('getchatid', async(ctx) => {
	const chat = ctx?.chat;
	const user = ctx.from;
	const message = ctx?.message || ctx?.update?.edited_message;

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	addMessage2DB(ctx, chat, user, message).then();
	
	deleteMessage(ctx, message?.message_id).then();
	
	return sendAutoRemoveMsg(ctx, `userID: ${user?.id}; chatID: ${chat?.id}`, false, 5000);
});

bot.command('question', async(ctx) => {
	return ctx.sendMessage(`*–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\\.*

1\\. –£–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞\\.
    "*_–£ –º–µ–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç_*‚Äù \\- —ç—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å\\. *__–≠—Ç–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ__*\\.

–ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:
    ‚ó¶ "–£ –º–µ–Ω—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è \\(\`–ö–û–î|–ö–û–ú–ê–ù–î–ê|–ú–ï–¢–û–î\`\\) –∏ –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É –≤ \\(\`–ö–û–ù–°–û–õ–¨|–õ–û–ì|–≠–ö–†–ê–ù\`\\)"\\.
    ‚ó¶ "–£ –º–µ–Ω—è –µ—Å—Ç—å \\(\`–ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–¨|–ü–û–¢–†–ï–ë–ù–û–°–¢–¨|–ó–ê–î–ê–ß–ê\`\\) —Å–¥–µ–ª–∞—Ç—å \\(\`–î–ï–ô–°–¢–í–ò–ï\`\\) –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º \\(\`–ß–ï–ì–û\\-–¢–û\`\\)\\. \\(\`–ö–ê–ö|–ß–ï–ú\`\\) —ç—Ç–æ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?"
    ‚ó¶ "–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ \\(\`–ö–û–ú–ê–ù–î–´|–ù–ê–°–¢–†–û–ô–ö–ò|–ü–†–û–ì–†–ê–ú–ú–´\`\\) —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–∞–µ—Ç \`–û–®–ò–ë–ö–ê\`\\. –í–æ—Ç \\(\`–ö–û–î|–ö–û–ú–ê–ù–î–ê|–ù–ê–°–¢–†–û–ô–ö–ê\`\\), –∫–∞–∫ —è –ø—Ä–æ–±—É—é\\."

2\\. –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –í–∞—à–µ–π –æ—à–∏–±–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π \\(\`–ö–û–î|–ù–ê–°–¢–†–û–ô–ö–£|–ö–û–ù–§–ò–ì\`\\) \\(_proof\\-of\\-concept_\\), –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ —ç—Ç–æ–º –µ—â—ë –Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å\\.

3\\. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è [Markdown](https://ru.wikipedia.org/wiki/Markdown) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è \\(—Å–º–æ—Ç—Ä–∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É\\)\\. –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞–∑–º–µ—â–∞–π—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ \\(–ø—Ä–∏–ª–æ–∂–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏–µ–º\\)\\.

4\\. –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø\\.3 –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –ø—Ä–∏–Ω—Ü–∏–ø–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏\\. –í—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –ª–æ–≥–∏ –∑–∞ –≥–æ–¥ —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–¥–æ, –∫–∞–∫ –∏ –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å—Ä–∞–∑—É –≤—Å—é –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é \\(–æ—Ç—á—ë—Ç Aida –æ –í–∞—à–µ–π —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏, –ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–≤—ë–∑–¥ –≤ –º–æ–º–µ–Ω—Ç –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ—á–∏—Ö –¥–∞–Ω–Ω—ã—Ö\\)\\. –ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—Å—é –¥–æ–ø\\. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –í–∞—Å –∑–∞–ø—Ä–æ—Å—è—Ç\\.

5\\. –ù–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –∞—Ä—Ö–∏–≤—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã, –¥–µ–Ω–µ–≥ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\\. –ï—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —Ö–æ—Ä–æ—à–∏—Ö —Ñ–∞–π–ª\\-–æ–±–º–µ–Ω–Ω–∏–∫–æ–≤: [Google Drive](https://drive.google.com), [–û–±–ª–∞–∫–æ Mail\\.ru](https://cloud.mail.ru), [Dropbox](https://www.dropbox.com), [Yandex\\.Disk](https://360.yandex.ru/disk)\\. –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–º–∏\\.

6\\. –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–æ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏, –ø—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–µ, —Ç–æ –∞—Ä—Ö–∏–≤–∏—Ä—É–π—Ç–µ –∏—Ö\\. –ù–æ —Å —É—á—ë—Ç–æ–º –ø\\.4\\.

7\\. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ, \`–í –ß–ï–ú\` \\(\`IDE\`, \`–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä\`, \`–±—Ä–∞—É–∑–µ—Ä\`, \`–ü–û\`, \`–∫–æ–Ω—Å–æ–ª—å\`, \`–õ–û–ì\`\\) –∏ –Ω–∞ –∫–∞–∫–æ–π \`–û–°\` \\(–≤–µ—Ä—Å–∏—è, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å, –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è, —Ç–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\\) –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\\.

8\\.  –ü–æ—è—Å–Ω–∏—Ç–µ —Å—Ä–∞–∑—É –≤—Å–µ, —á—Ç–æ *–£–ñ–ï* –ø—Ä–æ–±–æ–≤–∞–ª–∏ –¥–µ–ª–∞—Ç—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ *–í–°–ï* –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\\. –≠—Ç–∏–º –í—ã —É–±–µ—Ä–µ–∂–µ—Ç–µ —Å–≤–æ—é –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –í–∞–º –æ—Ç–≤–µ—Ç–æ–≤\\.`,
		{parse_mode: 'MarkdownV2'}
	);
});

bot.command('test', async(ctx) => {
	const chat = ctx?.chat;
	const user = ctx.from;
	const message = ctx?.message || ctx?.update?.edited_message;

	const arr = (/\/test (.*)/gmi).exec(message?.text?.replace(/\s+/igm, ' '));
	const test_message = arr ? arr[1] : message?.text;
	// deleteMessage(ctx, message?.message_id).then();

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	addMessage2DB(ctx, chat, user, message).then();
	
	for(let re of spam_rules || []){
		const _re = generateRegExp(re);
		if(_re?.test(test_message)){
			console.log(`found spam message: ${test_message}`);
			
			deleteMessage(ctx, message?.message_id).then();
			
			return sendAutoRemoveMsg(ctx,
				`–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Å–ø–∞–º –ø–æ –ø—Ä–∞–≤–∏–ª—É: ${re}`,
				false,
				20000);
		}
	}
	return sendAutoRemoveMsg(ctx,
		`–ù–µ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–ø–∞–º–∞`,
		false,
		20000);
});

bot.action('apply_rules', async(ctx) => {
	const message = ctx?.update?.callback_query?.message;
	const chat = message.chat;
	const user = ctx?.update?.callback_query.from;
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	addMessage2DB(ctx, chat, user, message).then();
	
	const bNewUser = await getUserStateFromChat(chat, user);
	if(bNewUser === false){
		sendAutoRemoveMsg(ctx, `${makeName(user)}, –í–∞–º –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.`, false, 20000).then();
		return false;
		
	}else{
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
		await addUser2Chat2DB(chat, user, false);
		sendAutoRemoveMsg(ctx, `–°–ø–∞—Å–∏–±–æ, ${makeName(user)}. –¢–µ–ø–µ—Ä—å –í—ã –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–π —á–ª–µ–Ω –≥—Ä—É–ø–ø—ã.`, false, 20000).then();
		return true;
	}
});

bot.on('new_chat_members', async(ctx) => {
	const arr = [];
	console.log('new_chat_members');
	
	const func = async (user) => {
		const message = ctx?.message;
		const chat = message.chat;
		
		// const chat = await ctx.telegram.getChat(chatID);
		await addChat2DB(chat);
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î
		await addUser2DB(user);
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–≤—è–∑–∫–µ, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–≥–æ
		await addUser2Chat2DB(chat, user, true);
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		addMessage2DB(ctx, chat, user, message).then();
		
		deleteMessage(ctx, ctx?.message?.id).then();
		
		const _text = (HelloText || '')
			.replace(/%fName%/igm, user.first_name || '')
			.replace(/%lName%/igm, user.last_name || '')
			.replace(/%username%/igm, user.username || '');
		
		const _buttons = [];
		let bAccept = false;
		for(let i = 0; i < 3; i++){
			const bTrue = Math.random() >= 0.5;
			if((bTrue && !bAccept) || (i===2 && !bAccept)){
				_buttons.push(Markup.button.callback('–ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞', 'apply_rules', false));
				bAccept = true;

			}else{
				_buttons.push(Markup.button.callback(Math.random() >= 0.5 ? '–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞' : '–Ø –±–æ—Ç', 'reject_rules', false));
			}
		}
		
		return sentQuestion(ctx, _text,
			_buttons,
			3600000);
	};
	
	for(let i=0; i<ctx?.message?.new_chat_members; i++){
		const user = ctx?.message?.new_chat_members[i];
		arr.push(func(user));
	}
	
	return Promise.all(arr);
});

bot.on('left_chat_member', async(ctx) => {
	const arr = [];
	console.log('left_chat_member');
	
	const func = async (user) => {
		const message = ctx?.message;
		const chat = message.chat;
		
		await addChat2DB(chat);
		await addUser2DB(user);
		await removeUserFromChat2DB(chat, user);
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		addMessage2DB(ctx, chat, user, message).then();
		
		deleteMessage(ctx, ctx?.message?.id).then();
	};
	
	for(let i=0; i<ctx?.message?.left_chat_member	; i++){
		const user = ctx?.message?.left_chat_member	[i];
		arr.push(func(user));
	}
	
	return Promise.all(arr);
});

bot.on(['text', 'message', 'edited_message'], async(ctx) => {
	console.log('chat message');
	const message = ctx?.message || ctx?.update?.edited_message;
	const chat = message.chat;
	const user = message?.from;
	
	// const chat = await ctx.telegram.getChat(chatID);
	await addChat2DB(chat);
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î
	await addUser2DB(user);
	
	//–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —á–∞—Ç–∞
	const bNewUser = await getUserStateFromChat(chat, user);
	if(typeof (bNewUser) !== 'boolean'){
		// –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç –∫–∞–∫ –Ω–æ–≤–æ–≥–æ
		await addUser2Chat2DB(chat, user, true);
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	addMessage2DB(ctx, chat, user, message).then();
	
	if(bNewUser !== false){
		await deleteMessage(ctx, message?.message_id);

		const _buttons = [];
		let bAccept = false;
		for(let i = 0; i < 3; i++){
			const bTrue = Math.round(1) >= 0.5;
			if(bTrue && !bAccept){
				_buttons.push(Markup.button.callback('–ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞', 'apply_rules', false));
				bAccept = true;
			}else if(i === 2 && !bAccept){
				_buttons.push(Markup.button.callback('–ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞', 'apply_rules', false));
				bAccept = true;
			}else{
				_buttons.push(Markup.button.callback(Math.round(1) >= 0.5 ? '–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞' : '–Ø –±–æ—Ç', 'reject_rules', false));
			}
		}
		
		return sentQuestion(ctx,
			`${makeName(
				user)}, –í—ã –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –í—ã —Å–º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—á—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ https://t.me/sysadminru/104027`,
			_buttons,
			20000
		);
	}
	
	for(let re of spam_rules || []){
		if(generateRegExp(re)?.test(message?.text)){
			console.log(`found spam message: ${message?.text}`);
			deleteMessage(ctx, message?.message_id).then();
			
			if(bannedUserID[message?.from?.id]){
				if(message?.chat?.type !== 'private'){
					await bot.telegram.banChatMember(message?.chat?.id, message.from.id, (message?.date + 3600));
					console.log(`User ${message.from.id} banned in ${message?.chat?.id}`);
				}
				
				delete bannedUserID[message?.from?.id];
				
			}else{
				bannedUserID[message?.from?.id] = true;
			}
			
			return sendAutoRemoveMsg(ctx,
				`${message?.from?.first_name || ''} ${message?.from.last_name || ''}${message?.from?.username ? ` (@${message.from.username})` : ''} ‚Äî –ü–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –í –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –º–µ—Å—Ç–∞ —Å–ø–∞–º—É.`,
				false,
				20000);
		}
	}
});

(async() => {
	try{
		console.info('Opening DB...');
		await db.open_db();
		console.info('DB is opened.');
		console.info('Testing connect to DB...');
		await db.query('SELECT 1;');
		console.info('Connect to DB was been tested.');
		
		
		console.info('Launch bot...');
		bot.launch().then();
		console.info('Bot is launching.');
		
	}catch(err){
		console.error(err);
		bot.stop('SIGINT');
		return db.close_db();
	}
})();

// Enable graceful stop
process.once('SIGINT', () => {
	bot.stop('SIGINT');
	return db.close_db();
});
process.once('SIGTERM', () => {
	bot.stop('SIGINT');
	return db.close_db();
});
