import OpenAI from "openai";
import logger from "./logger.mjs";
import * as telegram from "./telegram.mjs";
import * as telegram_db from "./telegram_db.mjs";

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;

let openai;
if(DEEPSEEK_API_KEY){
	openai = new OpenAI({
		baseURL: 'https://api.deepseek.com',
		apiKey:  process.env.DEEPSEEK_API_KEY,
		timeout: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
	});
}

/**
 * –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ SPAM
 * @param {String} message
 * @returns {Promise<Boolean>}
 */
export async function isSpamMessage(message){
	if(!openai) {
		logger.warn('DeepSeek API key is not set').then();
		return false;
	}

	try{
		// const prompt = `Check the message in quotes and answer only YES or NO if the message looks like SPAM "${message}"`;
		
		logger.log(`–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º "${message}"`).then();
		
		const completion = await openai.chat.completions.create({
			messages: [{
				role: 'system', content: 'Check the message and answer only YES or NO if the message looks like SPAM'
			}, {
				role: 'user', content: message
			}],
			model:    'deepseek-reasoner',
		});
		
		logger.log(completion.choices[0].message.content).then();
		
		return completion.choices[0].message.content.toUpperCase().includes('YES');
		
	}catch(err){
		logger.err(err).then();
		
		return false;
	}
}

/**
 *
 * @param {String} message
 * @returns {Promise<?String>}
 */
export async function testMessage(message){
	if(!openai) {
		logger.warn('DeepSeek API key is not set').then();
		return null;
	}

	try{
		// const prompt = `Check the message in quotes and answer only YES or NO if the message looks like SPAM "${message}"`;
		
		logger.log(`–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º "${message}"`).then();
		const completion = await openai.chat.completions.create({
			messages:    [{
				role: 'system', content: 'Check the message and answer only YES or NO if the message looks like SPAM'
			}, {
				role: 'user', content: message
			}],
			model:       'deepseek-chat',
			temperature: 1.3,
		});
		
		return completion.choices[0].message.content;
		
	}catch(err){
		logger.err(err).then();
		
		return '';
	}
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ DeepSeek
 * @param {Object} messages
 * @returns {Promise<Object>}
 */
export async function sendMessages(messages){
	if(!openai) {
		logger.warn('DeepSeek API key is not set').then();
		return null;
	}

	if(messages?.length > 0){
		try{
			logger.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:"`).then();
			logger.dir(messages).then();
			const completion = await openai.chat.completions.create({
				messages:    [{role: 'system', content: '–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É `markdown`. –í—ã–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –∏–Ω–æ–µ –Ω–µ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –≤ –≤–æ–ø—Ä–æ—Å–µ.'}].concat(messages),
				model:       'deepseek-chat',
				temperature: 1.5,
			});
			
			logger.trace(`–û—Ç–≤–µ—Ç:`).then();
			logger.dir(completion?.choices[0]?.message).then();
			return completion?.choices[0]?.message;
			
		}catch(err){
			logger.err(err).then();
			
			return '';
		}
	}
}

// ------------------------------------------------

/**
 * –î–∏–∞–ª–æ–≥ —Å DeepSeek
 * @param {CTX} ctx
 * @returns {Promise<[Message.TextMessage]>}
 */
export const deepSeekTalks = async(ctx) => {
	if(!openai) {
		logger.warn('DeepSeek API key is not set').then();
		return null;
	}

	const message = ctx?.update?.message || ctx?.update?.edited_message;
	if(message && message?.message_id && message?.text){
		const botInfo = ctx?.botInfo;
		if(botInfo && botInfo?.is_bot && botInfo?.id){
			const chat = message.chat;
			const user = message.from;
			
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–¢—É—Ç –Ω–∞–¥–æ –¥–æ–∂–¥–∞—Ç—å—Å—è —á—Ç–æ –±—ã –∏–∑ –ë–î –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–∞–∑—É –≤–µ—Å—å –¥–∏–∞–ª–æ–≥, –≤–∫–ª—é—á–∞—è –≠–¢–û —Å–æ–æ–±—â–µ–Ω–∏–µ)
			await telegram_db.addMessage2DB(ctx, chat, user, message);
			
			// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
			const messages = await telegram_db.getMessagesReplyLink(ctx?.botInfo?.id, message.chat?.id, message.message_id);
			
			if(messages?.length > 0){
				// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É DeepSeek

				// –£–≤–µ–¥–æ–º–ª—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
				let _symb = `üîÉÔ∏è`;
				const _mess = await telegram.replyMessage(ctx, message?.message_id, `${_symb} –ú–∏–Ω—É—Ç–∫—É... –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç...`, false);
				const updater_handler   = setInterval(async () => {
					const mess_id = (await _mess[0])?.message_id;
					switch(_symb){
						case 'üîÉÔ∏è': _symb = 'üîÑ'; break;
						default: _symb = 'üîÉÔ∏è'; break;
					}
					return telegram.editMessage(ctx, message?.chat?.id, mess_id, `${_symb} –ú–∏–Ω—É—Ç–∫—É... –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç...`, false);
				}, 500);

				const answer = await sendMessages(messages);

				// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
				clearInterval(updater_handler);

				// –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞
				for(let i=0; i<_mess?.length; i++){
					const mess_id = (await _mess[i])?.message_id;
					telegram.deleteMessage(ctx, mess_id).then();
				}

				if(answer){
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç DeepSeek –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
					let mess = await telegram.replyMessage(ctx, message?.message_id, answer?.content, true);
					Promise.all(mess).then(mess => {
						mess?.forEach(m => {
							if(m?.message_id){
								ctx.update.message = m;
								//–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç DeepSeek –≤ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
								telegram_db.addMessage2DB(ctx, chat, botInfo, m).then();
							}
						});
					});
					
					return mess;
				}

			}else{
				logger.warn('–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ DeepSeek').then();
			}
		}
	}
};

